import telebot
from models import Database

db = Database()


def setup_start_handlers(bot):
    @bot.message_handler(commands=['start'])
    def send_welcome(message):
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        user_id = message.from_user.id
        username = message.from_user.username

        db.add_user(user_id, username)

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = telebot.types.KeyboardButton('üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤')
        btn2 = telebot.types.KeyboardButton('üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å')
        btn3 = telebot.types.KeyboardButton('üì¶ –ú–æ–∏ –ø–æ–∫—É–ø–∫–∏')
        btn4 = telebot.types.KeyboardButton('üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞')
        markup.add(btn1, btn2, btn3, btn4)

        bot.send_message(
            message.chat.id,
            '–ü—Ä–∏–≤–µ—Ç! üëã –Ø –º–∞–≥–∞–∑–∏–Ω –ø—Ä–µ—Å–µ—Ç–æ–≤ –∏ –≥–∞–π–¥–æ–≤.\n\n'
            '–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:',
            reply_markup=markup
        )

    @bot.message_handler(func=lambda message: message.text == 'üõçÔ∏è –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤')
    def show_catalog(message):
        products = db.get_products()

        if not products:
            bot.send_message(message.chat.id, 'üì≠ –í –º–∞–≥–∞–∑–∏–Ω–µ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤')
            return

        for product in products:
            product_id, name, price, description, file_id, external_url, available_count, created_at = product

            text = f'''
üõí {name}
üíµ –¶–µ–Ω–∞: {price} —Ä—É–±.
üìù {description}
üì¶ –í –Ω–∞–ª–∏—á–∏–∏: {available_count} —à—Ç.
'''
            markup = telebot.types.InlineKeyboardMarkup()
            buy_btn = telebot.types.InlineKeyboardButton(
                '–ö—É–ø–∏—Ç—å',
                callback_data=f'buy_{product_id}'
            )
            markup.add(buy_btn)

            if file_id:
                # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–∞–π–ª (–ø—Ä–µ—Å–µ—Ç), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
                bot.send_document(
                    message.chat.id,
                    file_id,
                    caption=text,
                    reply_markup=markup
                )
            else:
                # –ï—Å–ª–∏ —ç—Ç–æ –≥–∞–π–¥ (—Å—Å—ã–ª–∫–∞)
                bot.send_message(
                    message.chat.id,
                    text,
                    reply_markup=markup
                )

    @bot.callback_query_handler(func=lambda call: call.data.startswith('buy_'))
    def handle_buy(call):
        product_id = int(call.data.split('_')[1])
        product = db.get_product(product_id)
        user = db.get_user(call.from_user.id)

        if not product:
            bot.answer_callback_query(call.id, '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω')
            return

        if product[6] <= 0:  # available_count
            bot.answer_callback_query(call.id, '–¢–æ–≤–∞—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—è')
            return

        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø–æ–∫—É–ø–∫–∏
        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–æ–∫—É–ø–∫–µ
        purchase_id = db.add_purchase(user[0], product_id, product[2])

        bot.answer_callback_query(call.id, '‚úÖ –ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞!')
        bot.send_message(
            call.message.chat.id,
            f'‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏: {product[1]}\n'
            f'üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: {product[2]} —Ä—É–±.\n'
            f'üì¶ –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: #{purchase_id}'
        )