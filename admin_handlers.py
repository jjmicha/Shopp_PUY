# handlers/admin_handlers.py
import telebot
from config import ADMIN_IDS
from models import Database


class AdminStates:
    WAITING_PRODUCT_NAME = 1
    WAITING_PRODUCT_PRICE = 2
    WAITING_PRODUCT_DESCRIPTION = 3
    WAITING_PRODUCT_FILE = 4
    WAITING_PRODUCT_COUNT = 5


def setup_admin_handlers(bot, db):
    admin_states = {}

    def is_admin(user_id):
        return user_id in ADMIN_IDS

    @bot.message_handler(commands=['add_product'])
    def start_add_product(message):
        if not is_admin(message.from_user.id):
            bot.reply_to(message, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
            return

        admin_states[message.from_user.id] = {'state': AdminStates.WAITING_PRODUCT_NAME}
        bot.send_message(message.chat.id, "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")

    @bot.message_handler(func=lambda message:
    message.from_user.id in admin_states and
    admin_states[message.from_user.id]['state'] == AdminStates.WAITING_PRODUCT_NAME)
    def handle_product_name(message):
        admin_states[message.from_user.id].update({
            'state': AdminStates.WAITING_PRODUCT_PRICE,
            'name': message.text
        })
        bot.send_message(message.chat.id, "üí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):")

    @bot.message_handler(func=lambda message:
    message.from_user.id in admin_states and
    admin_states[message.from_user.id]['state'] == AdminStates.WAITING_PRODUCT_PRICE)
    def handle_product_price(message):
        try:
            price = float(message.text)
            admin_states[message.from_user.id].update({
                'state': AdminStates.WAITING_PRODUCT_DESCRIPTION,
                'price': price
            })
            bot.send_message(message.chat.id, "üìÑ –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
        except ValueError:
            bot.send_message(message.chat.id, "‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –µ—â–µ —Ä–∞–∑:")

    @bot.message_handler(func=lambda message:
    message.from_user.id in admin_states and
    admin_states[message.from_user.id]['state'] == AdminStates.WAITING_PRODUCT_DESCRIPTION)
    def handle_product_description(message):
        admin_states[message.from_user.id].update({
            'state': AdminStates.WAITING_PRODUCT_COUNT,
            'description': message.text
        })
        bot.send_message(message.chat.id, "üì¶ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1):")

    @bot.message_handler(func=lambda message:
    message.from_user.id in admin_states and
    admin_states[message.from_user.id]['state'] == AdminStates.WAITING_PRODUCT_COUNT)
    def handle_product_count(message):
        try:
            count = int(message.text) if message.text.strip() else 1
            admin_states[message.from_user.id].update({
                'state': AdminStates.WAITING_PRODUCT_FILE,
                'available_count': count
            })
            bot.send_message(message.chat.id, "üìé –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –¥–ª—è —Ç–æ–≤–∞—Ä–∞ (–¥–æ–∫—É–º–µ–Ω—Ç, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —Ç.–¥.):")
        except ValueError:
            bot.send_message(message.chat.id, "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ—â–µ —Ä–∞–∑:")

    @bot.message_handler(content_types=['document', 'photo'], func=lambda message:
    message.from_user.id in admin_states and
    admin_states[message.from_user.id]['state'] == AdminStates.WAITING_PRODUCT_FILE)
    def handle_product_file(message):
        user_data = admin_states[message.from_user.id]

        if message.content_type == 'document':
            file_id = message.document.file_id
        elif message.content_type == 'photo':
            file_id = message.photo[-1].file_id  # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ
        else:
            bot.send_message(message.chat.id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            return

        try:
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            product_id = db.add_product(
                name=user_data['name'],
                price=user_data['price'],
                description=user_data['description'],
                file_id=file_id,
                available_count=user_data.get('available_count', 1)
            )

            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            del admin_states[message.from_user.id]

            bot.send_message(
                message.chat.id,
                f"‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n"
                f"ID: {product_id}\n"
                f"–ù–∞–∑–≤–∞–Ω–∏–µ: {user_data['name']}\n"
                f"–¶–µ–Ω–∞: {user_data['price']} —Ä—É–±.\n"
                f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {user_data.get('available_count', 1)} —à—Ç."
            )

        except Exception as e:
            bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: {str(e)}")
            del admin_states[message.from_user.id]

    @bot.message_handler(commands=['cancel'])
    def cancel_operation(message):
        if message.from_user.id in admin_states:
            del admin_states[message.from_user.id]
            bot.send_message(message.chat.id, "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")

    @bot.message_handler(commands=['admin'])
    def admin_panel(message):
        if not is_admin(message.from_user.id):
            return

        markup = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = telebot.types.KeyboardButton('/add_product')
        btn2 = telebot.types.KeyboardButton('/stats')
        btn3 = telebot.types.KeyboardButton('/cancel')
        markup.add(btn1, btn2, btn3)

        bot.send_message(
            message.chat.id,
            "üë®‚Äçüíº –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=markup
        )