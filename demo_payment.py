# handlers/demo_payment.py
import uuid
import telebot
from config import DEMO_CARDS

# –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–∑ main.py
DEMO_PAYMENT_URL = None


def setup_demo_payment_handlers(bot, db):
    @bot.callback_query_handler(func=lambda call: call.data.startswith('buy_'))
    def handle_buy(call):
        if not DEMO_PAYMENT_URL:
            bot.answer_callback_query(call.id, '‚ùå –ü–ª–∞—Ç–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞')
            return

        product_id = int(call.data.split('_')[1])
        product = db.get_product(product_id)
        user = db.get_user(call.from_user.id)

        if not product:
            bot.answer_callback_query(call.id, '‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω')
            return

        if product[6] <= 0:  # available_count
            bot.answer_callback_query(call.id, '‚ùå –¢–æ–≤–∞—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—è')
            return

        # –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–ø–ª–∞—Ç–µ–∂
        payment_id = str(uuid.uuid4())
        amount = float(product[2])

        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –ë–î
            db.create_demo_payment(payment_id, user[0], product_id, amount)

            # –°—Å—ã–ª–∫–∞ –Ω–∞ –¥–µ–º–æ-—Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–ø–ª–∞—Ç—ã
            payment_url = f"{DEMO_PAYMENT_URL}/pay/{payment_id}"

            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ (–Ω–∞ Replit –≤—Å–µ–≥–¥–∞ HTTPS)
            markup = telebot.types.InlineKeyboardMarkup()
            pay_btn = telebot.types.InlineKeyboardButton(
                'üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ',
                url=payment_url
            )
            check_btn = telebot.types.InlineKeyboardButton(
                '‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É',
                callback_data=f'check_{payment_id}'
            )
            markup.add(pay_btn)
            markup.add(check_btn)

            bot.send_message(
                call.message.chat.id,
                f'üí≥ *–û–ø–ª–∞—Ç–∞ —Ç–æ–≤–∞—Ä–∞*\n\n'
                f'üõí *{product[1]}*\n'
                f'üíµ *–°—É–º–º–∞: {amount} —Ä—É–±.*\n'
                f'üÜî *ID –ø–ª–∞—Ç–µ–∂–∞: {payment_id}*\n\n'
                f'üí° *–î–µ–º–æ-—Ä–µ–∂–∏–º:* –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ—Å—Ç–æ–≤—É—é –∫–∞—Ä—Ç—É:\n`{DEMO_CARDS["success"]}`\n\n'
                f'1. –ù–∞–∂–º–∏—Ç–µ "–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ"\n'
                f'2. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –æ–ø–ª–∞—Ç—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ\n'
                f'3. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É"',
                reply_markup=markup,
                parse_mode='Markdown'
            )

            bot.answer_callback_query(call.id, '‚úÖ –°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞')

        except Exception as e:
            print(f"Payment error: {e}")
            bot.answer_callback_query(call.id, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞')

    # –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π (check_payment –∏ show_my_purchases)
    @bot.callback_query_handler(func=lambda call: call.data.startswith('check_'))
    def check_payment(call):
        payment_id = call.data.replace('check_', '')
        payment_record = db.get_demo_payment(payment_id)

        if not payment_record:
            bot.answer_callback_query(call.id, '‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω')
            return

        status = payment_record[4]

        if status == 'succeeded':
            product = db.get_product(payment_record[3])
            user_id = payment_record[2]

            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–æ–∫—É–ø–∫–µ
            purchase_id = db.add_purchase(user_id, payment_record[3], payment_record[4])

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            if product[4]:
                try:
                    bot.send_document(
                        call.message.chat.id,
                        product[4],
                        caption=f'‚úÖ *–ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞!*\n\n'
                                f'üõí *{product[1]}*\n'
                                f'üíµ –°—É–º–º–∞: {product[2]} —Ä—É–±.\n'
                                f'üì¶ –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: #{purchase_id}\n'
                                f'üÜî –ü–ª–∞—Ç–µ–∂: {payment_id}\n\n'
                                f'üí° *–î–µ–º–æ-—Ä–µ–∂–∏–º:* –î–µ–Ω—å–≥–∏ –Ω–µ —Å–ø–∏—Å—ã–≤–∞–ª–∏—Å—å\n\n'
                                f'–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! üéâ',
                        parse_mode='Markdown'
                    )
                except:
                    bot.send_message(
                        call.message.chat.id,
                        f'‚úÖ *–ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞!*\n\n'
                        f'üõí *{product[1]}*\n'
                        f'üíµ –°—É–º–º–∞: {product[2]} —Ä—É–±.\n'
                        f'üì¶ –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: #{purchase_id}\n'
                        f'üÜî –ü–ª–∞—Ç–µ–∂: {payment_id}\n\n'
                        f'üí° *–î–µ–º–æ-—Ä–µ–∂–∏–º:* –î–µ–Ω—å–≥–∏ –Ω–µ —Å–ø–∏—Å—ã–≤–∞–ª–∏—Å—å\n\n'
                        f'–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! üéâ',
                        parse_mode='Markdown'
                    )
            else:
                bot.send_message(
                    call.message.chat.id,
                    f'‚úÖ *–ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞!*\n\n'
                    f'üõí *{product[1]}*\n'
                    f'üíµ –°—É–º–º–∞: {product[2]} —Ä—É–±.\n'
                    f'üì¶ –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: #{purchase_id}\n'
                    f'üÜî –ü–ª–∞—Ç–µ–∂: {payment_id}\n\n'
                    f'üí° *–î–µ–º–æ-—Ä–µ–∂–∏–º:* –î–µ–Ω—å–≥–∏ –Ω–µ —Å–ø–∏—Å—ã–≤–∞–ª–∏—Å—å\n\n'
                    f'–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! üéâ',
                    parse_mode='Markdown'
                )

            bot.answer_callback_query(call.id, '‚úÖ –ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω')

        elif status == 'pending':
            bot.answer_callback_query(call.id, '‚è≥ –ü–ª–∞—Ç–µ–∂ –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω')
        else:
            bot.answer_callback_query(call.id, '‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω')

    @bot.message_handler(func=lambda message: message.text == 'üì¶ –ú–æ–∏ –ø–æ–∫—É–ø–∫–∏')
    def show_my_purchases(message):
        user = db.get_user(message.from_user.id)
        if not user:
            bot.send_message(message.chat.id, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
            return

        purchases = db.get_user_purchases(user[0])

        if not purchases:
            bot.send_message(message.chat.id, 'üì≠ –£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –ø–æ–∫—É–ø–æ–∫')
            return

        bot.send_message(message.chat.id, 'üõí *–í–∞—à–∏ –ø–æ–∫—É–ø–∫–∏:*', parse_mode='Markdown')

        for purchase in purchases:
            purchase_id, user_id, product_id, price, status, delivered_at, created_at, product_name, file_id = purchase

            if file_id:
                try:
                    bot.send_document(
                        message.chat.id,
                        file_id,
                        caption=f'üõí *{product_name}*\n'
                                f'üíµ –¶–µ–Ω–∞: {price} —Ä—É–±.\n'
                                f'üìÖ –î–∞—Ç–∞: {created_at}\n'
                                f'üì¶ –ó–∞–∫–∞–∑: #{purchase_id}\n\n'
                                f'üí° *–î–µ–º–æ-–ø–æ–∫—É–ø–∫–∞*'
                    )
                except:
                    bot.send_message(
                        message.chat.id,
                        f'üõí *{product_name}*\n'
                        f'üíµ –¶–µ–Ω–∞: {price} —Ä—É–±.\n'
                        f'üìÖ –î–∞—Ç–∞: {created_at}\n'
                        f'üì¶ –ó–∞–∫–∞–∑: #{purchase_id}\n\n'
                        f'üí° *–î–µ–º–æ-–ø–æ–∫—É–ø–∫–∞*'
                    )
            else:
                bot.send_message(
                    message.chat.id,
                    f'üõí *{product_name}*\n'
                    f'üíµ –¶–µ–Ω–∞: {price} —Ä—É–±.\n'
                    f'üìÖ –î–∞—Ç–∞: {created_at}\n'
                    f'üì¶ –ó–∞–∫–∞–∑: #{purchase_id}\n\n'
                    f'üí° *–î–µ–º–æ-–ø–æ–∫—É–ø–∫–∞*'
                )